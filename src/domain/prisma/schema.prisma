// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  info     UserInfo?  @relation(fields: [infoId], references: [id])
  infoId   String?    @unique @db.ObjectId
  roles    Role[]     @relation(fields: [roleIds], references: [id])
  roleIds  String[]   @db.ObjectId
  sessions Session[]

  @@map("users")
}

// UserInfo model
model UserInfo {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  birthDate       DateTime
  phone           String
  address         String
  school          String?
  class           String?
  docType         String?
  docID           String?
  avatar          String?
  gender          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  user            User?
  userId          String    @unique @db.ObjectId
  teacherId       String?   @db.ObjectId

  @@map("users_info")
}

// Role model
model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users     User[]    @relation(fields: [userIds], references: [id])
  userIds   String[]  @db.ObjectId

  @@map("roles")
}

// Session model
model Session {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  accessToken String    @unique
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId

  @@map("sessions")
}
